// Based on: https://raw.githubusercontent.com/Zokrates/ZoKrates/a757921bad1bab80aafe2ac7c2caccab88feb9f7/zokrates_cli/examples/merkleTree/sha256PathProof3.zok

import "hashes/sha256/512bitPadded.code" as hash;
import "hashes/sha256/512bitPadded.code" as sha256;

import "hashes/utils/256bitsDirectionHelper" as multiplex;

from "ecc/babyjubjubParams" import BabyJubJubParams;
import "signatures/verifyEddsa.code" as verifyEddsa;
import "ecc/babyjubjubParams.code" as context;

const u32 DEPTH = 3;

def select(bool condition, u32[8] left, u32[8] right) -> (u32[8], u32[8]){
	return (if condition { right} else {left}, if condition {left} else {right});
}

// Merke-Tree inclusion proof for tree depth 4 using sha256
// directionSelector => true if current digest is on the rhs of the hash

def main(private u32[8] leaf1, u32[8] root, private bool[DEPTH] directionSelector1, private u32[DEPTH][8] path1, private field[2] R1, private field S1, field[2] A1, u32[8] M01, u32[8] M11, private u32[8] leaf2, private bool[DEPTH] directionSelector2, private u32[DEPTH][8] path2, private field[2] R2, private field S2, field[2] A2, u32[8] M02, u32[8] M12, private u32[8] leaf3, private bool[DEPTH] directionSelector3, private u32[DEPTH][8] path3, private field[2] R3, private field S3, field[2] A3, u32[8] M03, u32[8] M13, private u32[8] leaf4, private bool[DEPTH] directionSelector4, private u32[DEPTH][8] path4, private field[2] R4, private field S4, field[2] A4, u32[8] M04, u32[8] M14, private u32[8] leaf5, private bool[DEPTH] directionSelector5, private u32[DEPTH][8] path5, private field[2] R5, private field S5, field[2] A5, u32[8] M05, u32[8] M15, private u32[8] leaf6, private bool[DEPTH] directionSelector6, private u32[DEPTH][8] path6, private field[2] R6, private field S6, field[2] A6, u32[8] M06, u32[8] M16,  private u32[8] leaf7, private bool[DEPTH] directionSelector7, private u32[DEPTH][8] path7, private field[2] R7, private field S7, field[2] A7, u32[8] M07, u32[8] M17,  private u32[8] leaf8, private bool[DEPTH] directionSelector8, private u32[DEPTH][8] path8, private field[2] R8, private field S8, field[2] A8, u32[8] M08, u32[8] M18,private u32[8] leaf9, private bool[DEPTH] directionSelector9, private u32[DEPTH][8] path9, private field[2] R9, private field S9, field[2] A9, u32[8] M09, u32[8] M19,private u32[8] leaf10, private bool[DEPTH] directionSelector10, private u32[DEPTH][8] path10, private field[2] R10, private field S10, field[2] A10, u32[8] M010, u32[8] M110) -> (bool, bool, bool){
	//Verify Signature (R,S) with PupKey (A) on Hash (M0, M1)
	BabyJubJubParams context = context();
    bool isVerified1 = verifyEddsa(R1, S1, A1, M01, M11, context);
    u32[8] hash1 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf1);
    bool hashcheck1 = hash1 == M01;

	// Start from the leaf
	u32[8] mut digest1 = leaf1;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector1[i], digest1, path1[i]);
		digest1 = hash(left_right.0,left_right.1);
	}

	bool inSet1 = digest1 == root;

	bool isVerified2 = verifyEddsa(R2, S2, A2, M02, M12, context);
    u32[8] hash2 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf2);
    bool hashcheck2 = hash2 == M02;

	// Start from the leaf
	u32[8] mut digest2 = leaf2;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector2[i], digest2, path2[i]);
		digest2 = hash(left_right.0,left_right.1);
	}

	bool inSet2 = digest2 == root;

	bool isVerified3 = verifyEddsa(R3, S3, A3, M03, M13, context);
    u32[8] hash3 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf3);
    bool hashcheck3 = hash3 == M03;

	// Start from the leaf
	u32[8] mut digest3 = leaf3;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector3[i], digest3, path3[i]);
		digest3 = hash(left_right.0,left_right.1);
	}

	bool inSet3 = digest3 == root;

	bool isVerified4 = verifyEddsa(R4, S4, A4, M04, M14, context);
    u32[8] hash4 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf4);
    bool hashcheck4 = hash4 == M04;

	// Start from the leaf
	u32[8] mut digest4 = leaf4;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector4[i], digest4, path4[i]);
		digest4 = hash(left_right.0,left_right.1);
	}

	bool inSet4 = digest4 == root;

	bool isVerified5 = verifyEddsa(R5, S5, A5, M05, M15, context);
    u32[8] hash5 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf5);
    bool hashcheck5 = hash5 == M05;

	// Start from the leaf
	u32[8] mut digest5 = leaf5;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector5[i], digest5, path5[i]);
		digest5 = hash(left_right.0,left_right.1);
	}

	bool inSet5 = digest5 == root;

	bool isVerified6 = verifyEddsa(R6, S6, A6, M06, M16, context);
    u32[8] hash6 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf6);
    bool hashcheck6 = hash6 == M06;
 

		// Start from the leaf
	u32[8] mut digest6 = leaf6;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector6[i], digest6, path6[i]);
		digest6 = hash(left_right.0,left_right.1);
	}

	bool inSet6 = digest6 == root;

	bool isVerified7 = verifyEddsa(R7, S7, A7, M07, M17, context);
    u32[8] hash7 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf7);
    bool hashcheck7 = hash7 == M07;

	// Start from the leaf
	u32[8] mut digest7 = leaf7;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector7[i], digest7, path7[i]);
		digest7 = hash(left_right.0,left_right.1);
	}

	bool inSet7 = digest7 == root;

	bool isVerified8 = verifyEddsa(R8, S8, A8, M08, M18, context);
    u32[8] hash8 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf8);
    bool hashcheck8 = hash8 == M08;
 

		// Start from the leaf
	u32[8] mut digest8 = leaf8;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector8[i], digest8, path8[i]);
		digest8 = hash(left_right.0,left_right.1);
	}

	bool inSet8 = digest8 == root;

	bool isVerified9 = verifyEddsa(R9, S9, A9, M09, M19, context);
    u32[8] hash9 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf9);
    bool hashcheck9 = hash9 == M09;

	// Start from the leaf
	u32[8] mut digest9 = leaf9;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector9[i], digest9, path9[i]);
		digest9 = hash(left_right.0,left_right.1);
	}

	bool inSet9 = digest9 == root;

	bool isVerified10 = verifyEddsa(R10, S10, A10, M010, M110, context);
    u32[8] hash10 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf10);
    bool hashcheck10 = hash10 == M010;
 

		// Start from the leaf
	u32[8] mut digest10 = leaf10;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector10[i], digest10, path10[i]);
		digest10 = hash(left_right.0,left_right.1);
	}

	bool inSet10 = digest10 == root;

	bool isVerified = isVerified1 && isVerified2 && isVerified3 && isVerified4 && isVerified5 && isVerified6  && isVerified7 && isVerified8 && isVerified9 && isVerified10  ;
	bool hashcheck = hashcheck1 && hashcheck2 && hashcheck3 && hashcheck4 && hashcheck5 && hashcheck6 && hashcheck7 && hashcheck8 && hashcheck9 && hashcheck10;
	bool inSet = inSet1 && inSet2 && inSet3 && inSet4 && inSet5 && inSet6 && inSet7 && inSet8 && inSet9 && inSet10; 
	

	return (isVerified, hashcheck, inSet);
}